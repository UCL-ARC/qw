on:
  pull_request:

env:
  # Adding in token so we can use gh CLI
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  pull-request-parsing:
    runs-on: ubuntu-latest
    steps:
      - name: parse from github event
        run: |
          echo "title: ${TITLE}" \
          && echo "body ${BODY}" \
          && echo "number ${NUMBER}" \
        env:
          TITLE: ${{ github.event.pull_request.title }}
          BODY: ${{ github.event.pull_request.body }}
          NUMBER: ${{ github.event.pull_request.number }}
      - name: join assignees
        run: |
          # Using name for full name, can also use login for github login
          gh pr view ${{ github.event.pull_request.html_url }} \
                      --json "assignees" --jq '.assignees | map(.name) | join(", ")'
      - name: join labels
        run: |
          gh pr view ${{ github.event.pull_request.html_url }} \
                      --json "labels" --jq '.labels | map(.name) | join(", ")'
      - name: label check
        if: ${{ contains(github.event.pull_request.labels.*.name, 'enhancement') }}
        run: |
          echo "enhancement label found"
      - name: join linked issues
        run: |
          # taken from https://github.com/cli/cli/discussions/7097#discussioncomment-5229031
          gh api graphql \
          -F owner='${{ github.repository_owner }}' \
          -F repo='${{ github.event.repository.name }}' \
          -F pr=${{ github.event.pull_request.number }} \
          -f query='
          query ($owner: String!, $repo: String!, $pr: Int!) {
                  repository(owner: $owner, name: $repo) {
                          pullRequest(number: $pr) {
                                  closingIssuesReferences(first: 100) {
                                          nodes {
                                                  number
                                          }
                                  }
                          }
                  }
          }'  --jq '.data.repository.pullRequest.closingIssuesReferences.nodes | map(.number) | join (", ")'
      - name: Join approving reviewers
        run: |
          # filter to only yes or no approvals, then find the most recent review by user
          # keep only approved reviews and then join the author logins - would need to later map logins to names but seems fine
          gh pr view ${{ github.event.pull_request.html_url }} \
            --json "reviews" --jq '.reviews[] | select(.state==("DISMISSED", "APPROVED"))' \
            | jq --slurp 'group_by(.author.login) | map(max_by(.submittedAt)) | map(select(.state=="APPROVED")) | map(.author.login) | join(", ")'
